{"version":3,"sources":["graphql/params/insertTodosParams.ts","graphql/params/deleteTodosParams.ts","components/Header.tsx","graphql/mutations/crudMutations.ts","components/AddTodo.tsx","components/Todos.tsx","graphql/queries/crudQueries.ts","App.tsx","index.tsx"],"names":["InsertTodosParams","DeleteTodosParams","Header","INSERT_TODO","gql","Id","Name","Description","DELETE_TODO","AddTodo","todos","setTodos","useState","name","setName","description","setDescription","useMutation","insertTodo","className","onSubmit","event","preventDefault","newTodo","id","uuid_v4","variables","value","onChange","target","type","Todos","deleteMutation","map","elem","onClick","filter","todo","GET_TODOS","App","useQuery","loading","error","data","typedTodos","console","log","httpLink","createHttpLink","uri","authLink","setContext","_","headers","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"kMAAYA,ECAAC,E,mECQGC,EARA,WACb,OACE,mCACE,gD,kDFHMF,K,QAAAA,E,YAAAA,E,2BAAAA,M,cCAAC,K,SAAAA,M,KEIL,I,EAAME,EAAcC,YAAH,sRAEjBJ,EAAkBK,GAClBL,EAAkBM,KAClBN,EAAkBO,YAGZP,EAAkBK,GAChBL,EAAkBM,KACXN,EAAkBO,aAS3BC,EAAcJ,YAAH,sKAEjBH,EAAkBI,GAEKL,EAAkBK,I,QC2BjCI,G,MAvC6B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACpD,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAqBC,YAAYd,GAA1Be,EAAP,oBAyBA,OACE,uBAAMC,UAAU,MAAMC,SApBR,SAACC,GAAiC,IAAD,EAC/CA,EAAMC,iBACN,IAAIC,EAAgB,CAClBC,GAAIC,eACJZ,KAAMA,EACNE,YAAaA,GAEfG,EAAW,CACTQ,WAAS,mBACN1B,EAAkBK,GAAKkB,EAAQC,IADzB,cAENxB,EAAkBM,KAAOiB,EAAQV,MAF3B,cAGNb,EAAkBO,YAAcgB,EAAQR,aAHlC,KAMXD,EAAQ,IACRE,EAAe,IACfL,EAAS,GAAD,mBAAKD,GAAL,CAAYa,MAIpB,UACE,yCACA,uBAAOI,MAAOd,EAAMe,SA1BH,SAACP,GAAD,OAAgDP,EAAQO,EAAMQ,OAAOF,UA2BtF,gDACA,uBAAOA,MAAOZ,EAAaa,SA1BH,SAACP,GAAD,OAAgDL,EAAeK,EAAMQ,OAAOF,UA2BpG,wBAAQG,KAAK,SAAb,sBCRSC,G,MA3ByB,SAAC,GAAyB,IAAvBrB,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAChD,EAAyBM,YAAYT,GAA9BwB,EAAP,oBAWA,OACE,mCACCtB,EAAMuB,KAAI,SAACC,GACV,OACE,sBAAKf,UAAU,QAAf,UACE,4BAAIe,EAAKrB,OACT,4BAAIqB,EAAKnB,cACT,wBAAQoB,QAAS,kBAhBLX,EAgBsBU,EAAKV,GAf7CQ,EAAe,CACbN,UAAU,eACPzB,EAAkBI,GAAKmB,UAG5Bb,EAASD,EAAM0B,QAAO,SAAAC,GAAI,OAAIA,EAAKb,KAAOA,MANzB,IAACA,GAgBZ,iBAH0BU,EAAKV,WC3B5Bc,EAAYlC,YAAH,kHC6BPmC,G,MApBO,WACpB,MAAkCC,YAASF,GAAnCG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACpBC,EAAqBD,EAAOA,EAAKjC,MAAQ,KAC7C,EAA0BE,mBAASgC,GAAnC,mBAAOlC,EAAP,KAAcC,EAAd,KACA,OAAI8B,EAAgB,2CAChBC,GACFG,QAAQC,IAAIJ,GACL,wCAELC,IAASjC,GAAOC,EAASiC,GAG3B,sBAAKzB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAST,MAAOA,EAAOC,SAAUA,IACjC,cAAC,EAAD,CAAOD,MAAOA,EAAOC,SAAUA,U,wCClB/BoC,EAAWC,YAAe,CAC9BC,IAAK,6CA+BDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAChC,MAAO,CACLA,QAAQ,2BACHA,GADE,IAEL,wBAtCQ,yEA2CRC,EAAS,IAAIC,IAAa,CAC9BC,KAAMN,EAASO,OAAOV,GACtBW,MAAO,IAAIC,MAGbC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFS,SAASC,eAAe,W","file":"static/js/main.16bad0ab.chunk.js","sourcesContent":["export enum InsertTodosParams {\r\n  Id = 'id',\r\n  Name = 'name',\r\n  Description = 'description'\r\n}\r\n","export enum DeleteTodosParams {\r\n  Id = 'id'\r\n}","const Header = () => {\r\n  return (\r\n    <>\r\n      <h1>PS TODO App</h1>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Header;","import gql from 'graphql-tag';\r\nimport { InsertTodosParams } from '../params/insertTodosParams';\r\nimport { DeleteTodosParams } from '../params/deleteTodosParams';\r\n\r\nexport const INSERT_TODO = gql`\r\n  mutation insertTodo(\r\n    $${InsertTodosParams.Id}: String!, \r\n    $${InsertTodosParams.Name}: String!, \r\n    $${InsertTodosParams.Description}: String\r\n  ) {\r\n    insert_todos_one(object: { \r\n      id: $${InsertTodosParams.Id}, \r\n      name: $${InsertTodosParams.Name}, \r\n      description: $${InsertTodosParams.Description} }\r\n    ) {\r\n      id\r\n      name\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_TODO = gql`\r\n  mutation deleteTodo(\r\n    $${DeleteTodosParams.Id}: String!\r\n  ) {\r\n    delete_todos_by_pk(id: $${InsertTodosParams.Id}) {\r\n      id\r\n      name\r\n      description\r\n    }\r\n  }\r\n`;","import { useMutation } from \"@apollo/client\";\r\nimport React, { Dispatch, SetStateAction, useState } from \"react\";\r\nimport { INSERT_TODO } from '../graphql/mutations/crudMutations';\r\nimport { InsertTodosParams } from '../graphql/params/insertTodosParams';\r\nimport { v4 as uuid_v4 } from 'uuid';\r\nimport { Todo } from '../todo-interface';\r\n\r\nimport './AddTodo.css';\r\n\r\ninterface AddTodoInterface {\r\n  todos: Todo[],\r\n  setTodos: Dispatch<SetStateAction<Todo[]>>;\r\n}\r\n\r\nconst AddTodo: React.FC<AddTodoInterface> = ({ todos, setTodos }) => {\r\n  const [name, setName] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [insertTodo] = useMutation(INSERT_TODO);\r\n\r\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => setName(event.target.value)\r\n\r\n  const onDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => setDescription(event.target.value)\r\n\r\n  const addTodo = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    let newTodo: Todo = {\r\n      id: uuid_v4(),\r\n      name: name,\r\n      description: description\r\n    };\r\n    insertTodo({ \r\n      variables: { \r\n        [InsertTodosParams.Id]: newTodo.id,\r\n        [InsertTodosParams.Name]: newTodo.name,\r\n        [InsertTodosParams.Description]: newTodo.description\r\n      }\r\n    });\r\n    setName('');\r\n    setDescription('');\r\n    setTodos([...todos, newTodo]);\r\n  }\r\n  \r\n  return (\r\n    <form className=\"add\" onSubmit={addTodo}>\r\n      <label>Name</label>\r\n      <input value={name} onChange={onNameChange} />\r\n      <label>Description</label>\r\n      <input value={description} onChange={onDescriptionChange} />\r\n      <button type=\"submit\">Add</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddTodo;","import React, { Dispatch, SetStateAction } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { DELETE_TODO } from '../graphql/mutations/crudMutations';\r\nimport { DeleteTodosParams } from '../graphql/params/deleteTodosParams';\r\nimport { Todo } from '../todo-interface';\r\n\r\nimport './Todos.css';\r\n\r\ninterface TodosInterface {\r\n  todos: Todo[],\r\n  setTodos: Dispatch<SetStateAction<Todo[]>>;\r\n}\r\n\r\nconst Todos: React.FC<TodosInterface> = ({ todos, setTodos }) => {\r\n  const [deleteMutation] = useMutation(DELETE_TODO);\r\n\r\n  const deleteTodo = (id: string) => {\r\n    deleteMutation({\r\n      variables: {\r\n        [DeleteTodosParams.Id]: id\r\n      }\r\n    });\r\n    setTodos(todos.filter(todo => todo.id !== id));\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {todos.map((elem: Todo) => {\r\n      return (\r\n        <div className=\"todos\" key={elem.id}>\r\n          <p>{elem.name}</p>\r\n          <p>{elem.description}</p>\r\n          <button onClick={() => deleteTodo(elem.id)}>x</button>\r\n        </div>\r\n      )\r\n    })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Todos;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const GET_TODOS = gql`\r\n  query GetTodos {\r\n    todos {\r\n      id\r\n      name\r\n      description\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport Header from './components/Header';\nimport AddTodo from './components/AddTodo';\nimport Todos from './components/Todos';\nimport { GET_TODOS } from './graphql/queries/crudQueries';\n\nimport { Todo } from './todo-interface';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const { loading, error, data, } = useQuery(GET_TODOS);\n  let typedTodos: Todo[] = data ? data.todos : null;\n  const [todos, setTodos] = useState(typedTodos);\n  if (loading) return <p>Loading...</p>\n  if (error) {\n    console.log(error);\n    return <p>Error</p>\n  }\n  if (data && !todos) setTodos(typedTodos);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <AddTodo todos={todos} setTodos={setTodos}/>\n      <Todos todos={todos} setTodos={setTodos}/>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ApolloClient, ApolloProvider, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst token = 'Y3KG60bApd5xkk9AEIUtzZwo6hdfwjfIQZF3sDehMbnkt7MzYxc9jeLAdp95KZFg';\n\nconst httpLink = createHttpLink({\n  uri: 'https://ps-todo-db.hasura.app/v1/graphql',\n});\n\n// // Subscriptions require websockets\n// const wsLink = new WebSocketLink({\n//   uri: 'ws://ps-todo-db.hasura.app/v1/graphql',\n//   options: {\n//     reconnect: true,\n//     // This is needed specifically for Hasura to allow subscriptions\n//     connectionParams: {\n//       headers: {\n//         'Authorization': `Bearer ${token}`,\n//         \"x-hasura-admin-secret\": token\n//       }\n//     }\n//   }\n// });\n\n// const splitLink = split(\n//   ({ query }) => {\n//     const definition = getMainDefinition(query);\n//     return (\n//       definition.kind === 'OperationDefinition' &&\n//       definition.operation === 'subscription'\n//     );\n//   },\n//   wsLink,\n//   httpLink\n// );\n\n// Add Hasura admin secret header to allow permission to perform mutations and queries\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      \"x-hasura-admin-secret\": token\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}